#+html_doctype: html5
#+options: html5-fancy:t  html-style:nil

#+options: html-link-use-abs-url:nil html-postamble:auto
#+options: html-preamble:t html-scripts:nil

#+html_container: div
#+html_content_class: content
#+description:
#+keywords:
#+html_equation_reference_format: \eqref{%s}


#+TITLE: Async Fetch-Merge-Serve - User & Developer Guide
#+AUTHOR: Milan Santosi <milan.santosi@gmail.com>
#+DATE: 2025-02-19
#+OPTIONS: toc:2 num:nil

#+HTML_HEAD: <meta charset="UTF-8">
#+HTML_HEAD: <link href="https://unpkg.com/sanitize.css" rel="stylesheet"/>
#+HTML_HEAD: <meta name="viewport" content="width=device-width, initial-scale=1.0">
#+HTML_HEAD_EXTRA: <style>
#+HTML_HEAD_EXTRA: body {
#+HTML_HEAD_EXTRA:   background: linear-gradient(135deg, #1a1a1a, #333);
#+HTML_HEAD_EXTRA:   color: #f0f0f0;
#+HTML_HEAD_EXTRA:   font-family: 'Roboto', sans-serif;
#+HTML_HEAD_EXTRA:   line-height: 1.6;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: header, footer, .content {
#+HTML_HEAD_EXTRA:   background: rgba(255, 255, 255, 0.05);
#+HTML_HEAD_EXTRA:   padding: 20px;
#+HTML_HEAD_EXTRA:   border-radius: 8px;
#+HTML_HEAD_EXTRA:   margin: 10px;
#+HTML_HEAD_EXTRA:   box-shadow: 0 4px 8px rgba(0,0,0,0.3);
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: h1, h2, h3, h4 {
#+HTML_HEAD_EXTRA:   border-bottom: 1px solid rgba(255,255,255,0.1);
#+HTML_HEAD_EXTRA:   padding-bottom: 5px;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: a {
#+HTML_HEAD_EXTRA:   color: #66ff66;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: a:hover {
#+HTML_HEAD_EXTRA:   color: #ff66cc;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: code {
#+HTML_HEAD_EXTRA:   background: rgba(0,0,0,0.6);
#+HTML_HEAD_EXTRA:   padding: 2px 4px;
#+HTML_HEAD_EXTRA:   border-radius: 4px;
#+HTML_HEAD_EXTRA:   color: #ffcc00;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: pre {
#+HTML_HEAD_EXTRA:   background: rgba(0,0,0,0.8);
#+HTML_HEAD_EXTRA:   padding: 10px;
#+HTML_HEAD_EXTRA:   border-radius: 4px;
#+HTML_HEAD_EXTRA:   overflow: auto;
#+HTML_HEAD_EXTRA: }
#+HTML_HEAD_EXTRA: </style>

* Overview This project implements a serverless microservice named
**cf\_worker\_wasm\_microservice** that compiles to WebAssembly (WASM) and
runs on Cloudflare Workers. The service asynchronously fetches:
- User data from:
  http://jsonplaceholder.typicode.com/users/1
- Post data from:
  http://jsonplaceholder.typicode.com/posts?userId=1

It then merges these JSON responses into a single payload and returns
the combined result over HTTP. This project showcases modern Rust
development, WASM integration, and DevOps practices for efficient
serverless deployments.

* User Guide
** Deployment
- **Prerequisites:**
  - Rust (1.86.0-beta.1), Cargo (1.86.0-beta.1)
  - Wrangler (v3.109.2)
  - WASM target: `wasm32-unknown-unknown`
- **Build Commands:**
  #+BEGIN_SRC sh
    rustup target add wasm32-unknown-unknown
    cargo build --lib --release --target wasm32-unknown-unknown
  #+END_SRC
- **Deploy Commands:**
  #+BEGIN_SRC sh
    wrangler deploy
  #+END_SRC

** Usage After deployment, access your microservice via the generated
URL. Sending an HTTP GET request to the URL returns a merged JSON
response with user and post data.

* Developer Guide
** Project Structure
- **Cargo.toml:** Dependency and build configurations.
- **src/lib.rs:** Contains the event handler for HTTP requests, global
  fetch logic via JS interop, and JSON processing.
- Uses external crates: worker, serde, serde_json, futures,
  wasm-bindgen, wasm-bindgen-futures, serde-wasm-bindgen, and web-sys.

** Setup & Local Testing
- Clone the repository.
- Build locally with the WASM target:

#+BEGIN_SRC sh
  cargo build --lib --release --target wasm32-unknown-unknown
#+END_SRC
- Test functionality via Wrangler's dry-run:
  #+BEGIN_SRC sh
    wrangler deploy --dry-run --outdir=dist
  #+END_SRC

* Learning Progress
In this project folder I am solving the challenge a second time.  This
is not my first adventure in Rust, or in WASM.  The main motivation here
was that I feel strongly that Java is a little bit convoluted. And that
Spring Boot (unlike Quarkus), might not be the best choice for a
"serverless" environment.  But also: I am not the biggest fan of
"serverless", and I think that WASM is the much better choice.

As a Bonus, we also get for-free hosting on Cloudflare, so we can
actually have this microservice live and deployed somewhere!

That alone makes it more joyful and more satisfying.  Also, we are
completely avoiding Docker here because we can directly compile from
Rust to WASM, and with the cloudflare toolchain also instantly deploy.

Then the one aspect I enjoyed MOST in comparison to Java: this is just
two files!  `Cargo.toml` and `./src/lib.rs` so this is much more
pleasant to work with than the standard java folder and class names
structure and naming conventions.  And also the error messages from
rustc are a lot nicer than javac.


- **Rust & Async Programming:** Leveraging Rust’s asynchronous features
  to concurrently fetch remote data.
- **WebAssembly (WASM):** Compiling Rust code to WASM to achieve
  low-latency, on-demand execution.
- **Cloudflare Workers:** Integrating Rust WASM modules into
  Cloudflare’s serverless platform.
- **DevOps TODO :** Setting up CI/CD pipelines, monitoring deployments,
  and cost optimization strategies in a serverless environment.

* Resources
** Rust
- [The Rust Programming Language Book](https://doc.rust-lang.org/book/)
- [Rust Async Programming](https://rust-lang.github.io/async-book/)

** WebAssembly (WASM)
- [Rust and WebAssembly](https://rustwasm.github.io/)
- [MDN WebAssembly Documentation](https://developer.mozilla.org/en-US/docs/WebAssembly)

** Cloudflare Workers
- [Cloudflare Workers Documentation](https://developers.cloudflare.com/workers/)
- [Workers RS GitHub Repository](https://github.com/cloudflare/workers-rs)

** DevOps
- [Continuous Deployment with Wrangler](https://developers.cloudflare.com/workers/wrangler/)
- [Serverless DevOps Best Practices](https://www.serverless.com/blog/serverless-devops)

* DevOps Topics
- **CI/CD:** Automate building and deployment using GitHub Actions or
  GitLab CI.
- **Monitoring:** Utilize Cloudflare’s analytics and logging tools to
  monitor worker performance.
- **Security:** Apply best practices for securing serverless functions
  and managing API keys.
- **Cost Optimization:** Focus on reducing cold start latency and
  resource usage to minimize costs.

* Future Directions
- Optimize WASM compilation further to reduce cold start times.
- Extend the microservice with additional endpoints or real-time data
  processing.
- Integrate advanced DevOps workflows (e.g., blue-green deployments,
  canary releases).
- Build an interactive front-end for monitoring and managing
  deployments.

* Conclusion
The **cf_worker_wasm_microservice** project exemplifies modern
serverless development using Rust, WebAssembly, and Cloudflare
Workers.
