#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t
#+options: e:t email:nil expand-links:t f:t inline:t num:t p:nil
#+options: pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+options: title:t toc:t todo:t |:t
#+title: round two -  devlog
#+date: <2025-02-22 Sat>
#+author: Milan Santosi
#+email: milan.santosi@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 31.0.50 (Org mode 9.8-pre)
#+cite_export:

* round 2
- removed external reactive, caching, and resilience libraries to
  demonstrate raw Java OOP skills using built‑in features.
- switched from webflux/reactive programming to synchronous http calls
  with java.net.http for simplicity and clarity
- encapsulated http logic in an ApiClient class following the single
  responsibility principle
- improved separation of concerns by clearly splitting models, services,
  controllers, configuration, and cli components
- added a dedicated AppConfig for bean definitions (ObjectMapper,
  ApiClient) to centralize configuration and enhance testability
- configured ObjectMapper to ignore unknown json properties, increasing
  robustness against external api changes
- provided comprehensive unit and integration tests (including tests for
  the controller, service, and api client)
- introduced a cli runner (CliRunner) to demonstrate alternative
  application execution paths
- implemented a global exception handler to standardize error responses
  across the application
- included a detailed README with build, run, and test instructions for
  better documentation and maintainability
- used gradle and a justfile for consistent, modern build automation and
  task management
- overall, the refactored code shows practices such as encapsulation,
  modularity, and dependency injection, making it a strong example of
  java microservices architecture

* project summary: async data fetcher microservice
This project is a spring boot microservice that merges user and post
data from external apis, built with a strong emphasis on core OOP best
practices.

** project structure
- src/main/java
  - com.example.asyncdatafetcher
    - AsyncDataFetcherApplication.java: *the main entrypoint that
      bootstraps the spring boot application.*
    - cli/CliRunner.java: *a command-line runner that allows execution
      via the cli.*
    - controller/
      - DataFetchController.java: *exposes an endpoint ("/") returning
        merged api data.*
      - TestExceptionController.java: *provides a test endpoint
        ("/error") to simulate exceptions.*
    - exception/
      - GlobalExceptionHandler.java: *centralizes error handling using
        spring's @restcontrolleradvice.*
    - model/
      - User.java: *plain old java object representing user data.*
      - Post.java: *a pojo representing post data.*
      - MergedData.java: *combines user and post data into a single
        object.*
    - service/
      - ApiClient.java: *encapsulate http calls w/ java's built-in
        httpclient.*
      - DataFetchService.java: *fetches and merges data from external
        api for json mapping.*

- src/test/java
  - contains unit tests for the api client, data fetch service, and controllers.

- resources/
  - application.properties

- build.gradle

- Justfile


** oop thinking
- separation of concerns: each class focuses on a single responsibility
  (eg. api client handles http, service handles merging).
- modularity: the project is organized into distinct packages
  (controllers, services, models, etc.) to isolate functionality.
- encapsulation: domain models encapsulate their state using
  getters/setters, protecting internal data.
- dependency injection: spring boot’s di is used to inject dependencies,
  enhancing testability and reducing tight coupling.
- testability: clear separation and dependency injection make the code
  easily mockable and testable.
- error handling: a global exception handler ensures uniform error
  responses.
- clean code: the code emphasizes simplicity, clarity, and
  maintainability.
